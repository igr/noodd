---
title: "noodd"
layout: "main"
---

{% block head %}
  <style>
      main div {
          font-size: 40vmin;
          display: flex;
          justify-content: center;
          align-items: center;
          transform-origin: bottom center;
          line-height:30vmin;
          transition: .2s;
      }
  </style>
  <link href="https://fonts.googleapis.com/css?family=Abel|Abril+Fatface|Acme|Alegreya|Alegreya+Sans|Anton|Archivo|Archivo+Black|Archivo+Narrow|Arimo|Arvo|Asap|Asap+Condensed|Bitter|Bowlby+One+SC|Bree+Serif|Cabin|Cairo|Catamaran|Crete+Round|Crimson+Text|Cuprum|Dancing+Script|Dosis|Droid+Sans|Droid+Serif|EB+Garamond|Exo|Exo+2|Faustina|Fira+Sans|Fjalla+One|Francois+One|Gloria+Hallelujah|Hind|Inconsolata|Indie+Flower|Josefin+Sans|Julee|Karla|Lato|Libre+Baskerville|Libre+Franklin|Lobster|Lora|Mada|Manuale|Maven+Pro|Merriweather|Merriweather+Sans|Montserrat|Montserrat+Subrayada|Mukta+Vaani|Muli|Noto+Sans|Noto+Serif|Nunito|Open+Sans|Open+Sans+Condensed:300|Oswald|Oxygen|PT+Sans|PT+Sans+Caption|PT+Sans+Narrow|PT+Serif|Pacifico|Passion+One|Pathway+Gothic+One|Play|Playfair+Display|Poppins|Questrial|Quicksand|Raleway|Roboto|Roboto+Condensed|Roboto+Mono|Roboto+Slab|Ropa+Sans|Rubik|Saira|Saira+Condensed|Saira+Extra+Condensed|Saira+Semi+Condensed|Sedgwick+Ave|Sedgwick+Ave+Display|Shadows+Into+Light|Signika|Slabo+27px|Source+Code+Pro|Source+Sans+Pro|Spectral|Titillium+Web|Ubuntu|Ubuntu+Condensed|Varela+Round|Vollkorn|Work+Sans|Yanone+Kaffeesatz|Zilla+Slab|Zilla+Slab+Highlight" rel="stylesheet">
{% endblock %}


{% block main %}
  <main class="center-parent"><div id='g'>
    noodd
  </div></main>
{% endblock %}

{% block script %}
  <script src="foo.js"></script>
  <script>
  const fonts = [
    'Roboto',
    'Zilla Slab Highlight',
    'Open Sans',
    'Spectral',
    'Slabo 27px',
    'Lato',
    'Roboto Condensed',
    'Oswald',
    'Source Sans Pro',
    'Raleway',
    'Zilla Slab',
    'Montserrat',
    'PT Sans',
    'Roboto Slab',
    'Merriweather',
    'Saira Condensed',
    'Saira',
    'Open Sans Condensed',
    'Saira Semi Condensed',
    'Saira Extra Condensed',
    'Julee',
    'Archivo',
    'Ubuntu',
    'Lora',
    'Manuale',
    'Asap Condensed',
    'Faustina',
    'Cairo',
    'Playfair Display',
    'Droid Serif',
    'Noto Sans',
    'PT Serif',
    'Droid Sans',
    'Arimo',
    'Poppins',
    'Sedgwick Ave Display',
    'Titillium Web',
    'Muli',
    'Sedgwick Ave',
    'Indie Flower',
    'Mada',
    'PT Sans Narrow',
    'Noto Serif',
    'Bitter',
    'Dosis',
    'Josefin Sans',
    'Inconsolata',
    'Bowlby One SC',
    'Oxygen',
    'Arvo',
    'Hind',
    'Cabin',
    'Fjalla One',
    'Anton',
    'Cairo',
    'Playfair Display',
    'Droid Serif',
    'Noto Sans',
    'PT Serif',
    'Droid Sans',
    'Arimo',
    'Poppins',
    'Sedgwick Ave Display',
    'Titillium Web',
    'Muli',
    'Sedgwick Ave',
    'Indie Flower',
    'Mada',
    'PT Sans Narrow',
    'Noto Serif',
    'Bitter',
    'Dosis',
    'Josefin Sans',
    'Inconsolata',
    'Bowlby One SC',
    'Oxygen',
    'Arvo',
    'Hind',
    'Cabin',
    'Fjalla One',
    'Anton',
    'Acme',
    'Archivo Narrow',
    'Mukta Vaani',
    'Play',
    'Cuprum',
    'Maven Pro',
    'EB Garamond',
    'Passion One',
    'Ropa Sans',
    'Francois One',
    'Archivo Black',
    'Pathway Gothic One',
    'Exo',
    'Vollkorn',
    'Libre Franklin',
    'Crete Round',
    'Alegreya',
    'PT Sans Caption',
    'Alegreya Sans',
    'Source Code Pro',
  ];
  function rnd(max) {
    return Math.floor((Math.random() * max) + 1);
  }
  function change() {
    const style = _('#g').style;

    style.fontFamily = fonts[rnd(fonts.length) - 1];

    const weight = rnd(9);
    style.fontWeight = weight * 100;

    const skew = 45 - rnd(90);
    style.transform = 'skew(' + skew + 'deg)';
  }
  let word = '';
  ready(() => {
    const g = _('#g');
    setInterval(change, 200);

    document.addEventListener("keydown", event => {
      if (event.ctrlKey || event.altKey) {
        return;
      }
      if (event.key.length === 1) {
        word += event.key;
        g.innerHTML = word;
      }
      else {
        if (event.key === 'Backspace') {
          if (word.length > 0) {
            word = word.substr(0, word.length - 1);
            g.innerHTML = word;
            if (word === '') {
              g.innerHTML = 'noodd';
            }
          }
        }
        else if (event.key === 'Escape') {
          word = '';
          g.innerHTML = 'noodd';
        }
        else if (event.key === 'Enter') {
          run(word);
        }
      }

    });
  });

  // runs the word :)
  function run(word) {
    const hash = sha256(word);
    switch (hash) {
      case 'f905b19542ed08c9a9c26543cca32e5711d207dcffb81b4cdb44ce0b989431c9':
      case '07d715edb696fb5f628f7298e5d7217ed4d2bdfc5347a1c55fee30832267f21d':
      case 'ae448ac86c4e8e4dec645729708ef41873ae79c6dff84eff73360989487f08e5':
      case 'bafd151a86f9a573b153e76e3a8a0053b3340ce304a301a5354288fb18bce848':
      case '73d1b1b1bc1dabfb97f216d897b7968e44b06457920f00f2dc6c1ed3be25ad4c':
      case 'd05aa2a15fb3c40efeeb03bec445393f00074484cf01c8fb2da90ca6695a5531':
      case '4cd0e21a9a0795a14ec9aa5f0e7d1abff0492565770e43eafdf1e3e8afed1f33':
      case '4a38d08340cba469053d9f4f6f22322ea2b0225580ec5abb433a0b4e4ddddeaf':
      case '7063d51d1b2da165eee042de5d33cc27281ea80e1a291488c903b7fb5fc31da7':
      case '686f746a95b6f836d7d70567c302c3f9ebb5ee0def3d1220ee9d4e9f34f5e131':
      case '2a59d59e3809f827ce709d3815e3950eef4a6a93af5557a93a7fdfba71460843':
      case '2be23c585f15e5fd3279d0663036dd9f6e634f4225ef326fc83fb874dbb81a0f':
      case '4f8ac0b8c10df0c4d952dace6e1d4e835436664b90aa584d7e3d3570a57dc6d6':
      case '49002d515d1605d8e4928cdccea435328773268fb951e9dae201212284d374a5':
      case 'facf8b54e5c0b8c426bb1c4bf5a00abfeaa064dc89ba8298dfa0c083746eee5b':
        window.location.href = '/' + word;
    }
  }


  const sha256 = function sha256(ascii) {
    function rightRotate(value, amount) {
      return (value>>>amount) | (value<<(32 - amount));
    }

    var mathPow = Math.pow;
    var maxWord = mathPow(2, 32);
    var lengthProperty = 'length'
    var i, j; // Used as a counter across the whole file
    var result = ''

    var words = [];
    var asciiBitLength = ascii[lengthProperty]*8;

    //* caching results is optional - remove/add slash from front of this line to toggle
    // Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes
    // (we actually calculate the first 64, but extra values are just ignored)
    var hash = sha256.h = sha256.h || [];
    // Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes
    var k = sha256.k = sha256.k || [];
    var primeCounter = k[lengthProperty];
    /*/
    var hash = [], k = [];
    var primeCounter = 0;
    //*/

    var isComposite = {};
    for (var candidate = 2; primeCounter < 64; candidate++) {
      if (!isComposite[candidate]) {
        for (i = 0; i < 313; i += candidate) {
          isComposite[i] = candidate;
        }
        hash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;
        k[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;
      }
    }

    ascii += '\x80' // Append Æ‡' bit (plus zero padding)
    while (ascii[lengthProperty]%64 - 56) ascii += '\x00' // More zero padding
    for (i = 0; i < ascii[lengthProperty]; i++) {
      j = ascii.charCodeAt(i);
      if (j>>8) return; // ASCII check: only accept characters in range 0-255
      words[i>>2] |= j << ((3 - i)%4)*8;
    }
    words[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);
    words[words[lengthProperty]] = (asciiBitLength)

    // process each chunk
    for (j = 0; j < words[lengthProperty];) {
      var w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration
      var oldHash = hash;
      // This is now the undefinedworking hash", often labelled as variables a...g
      // (we have to truncate as well, otherwise extra entries at the end accumulate
      hash = hash.slice(0, 8);

      for (i = 0; i < 64; i++) {
        var i2 = i + j;
        // Expand the message into 64 words
        // Used below if
        var w15 = w[i - 15], w2 = w[i - 2];

        // Iterate
        var a = hash[0], e = hash[4];
        var temp1 = hash[7]
          + (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) // S1
          + ((e&hash[5])^((~e)&hash[6])) // ch
          + k[i]
          // Expand the message schedule if needed
          + (w[i] = (i < 16) ? w[i] : (
              w[i - 16]
              + (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3)) // s0
              + w[i - 7]
              + (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10)) // s1
            )|0
          );
        // This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble
        var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) // S0
          + ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2])); // maj

        hash = [(temp1 + temp2)|0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()
        hash[4] = (hash[4] + temp1)|0;
      }

      for (i = 0; i < 8; i++) {
        hash[i] = (hash[i] + oldHash[i])|0;
      }
    }

    for (i = 0; i < 8; i++) {
      for (j = 3; j + 1; j--) {
        var b = (hash[i]>>(j*8))&255;
        result += ((b < 16) ? 0 : '') + b.toString(16);
      }
    }
    return result;
  };

  </script>
{% endblock %}
